{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nvar Index = /*#__PURE__*/function (_Component) {\n  _inherits(Index, _Component);\n\n  var _super = _createSuper(Index);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      fileSelected: null,\n      uploadId: '',\n      fileName: '',\n      //backendUrl: 'https://tgvideos.net.pe'\n      backendUrl: 'https://unrsqziy8a.us-east-2.awsapprunner.com'\n    };\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"fileHandler\",\n    value: function () {\n      var _fileHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var fileSelected, fileName;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                try {\n                  fileSelected = event.target.files[0];\n                  fileName = fileSelected.name;\n                  this.setState({\n                    fileSelected: fileSelected\n                  });\n                  this.setState({\n                    fileName: fileName\n                  });\n                } catch (err) {\n                  console.error(err, err.message);\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fileHandler(_x) {\n        return _fileHandler.apply(this, arguments);\n      }\n\n      return fileHandler;\n    }()\n  }, {\n    key: \"startUpload\",\n    value: function () {\n      var _startUpload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n        var params, resp, uploadId;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                event.preventDefault();\n                params = {\n                  fileName: this.state.fileName,\n                  fileType: this.state.fileSelected.type\n                };\n                _context2.next = 5;\n                return axios.get(\"\".concat(this.state.backendUrl, \"/start-upload\"), {\n                  params: params\n                });\n\n              case 5:\n                resp = _context2.sent;\n                uploadId = resp.data.uploadId;\n                this.setState({\n                  uploadId: uploadId\n                });\n                this.uploadMultipartFile();\n                _context2.next = 14;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 11]]);\n      }));\n\n      function startUpload(_x2) {\n        return _startUpload.apply(this, arguments);\n      }\n\n      return startUpload;\n    }()\n  }, {\n    key: \"uploadMultipartFile\",\n    value: function () {\n      var _uploadMultipartFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var CHUNK_SIZE, fileSize, CHUNKS_COUNT, promisesArray, start, end, blob, index, getUploadUrlResp, presignedUrl, uploadResp, resolvedArray, uploadPartsArray, completeUploadResp;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                console.log('Inside uploadMultipartFile');\n                CHUNK_SIZE = 10 * 1024 * 1024; //4000000000 // 10MB\n\n                fileSize = this.state.fileSelected.size;\n                CHUNKS_COUNT = Math.floor(fileSize / CHUNK_SIZE) + 1;\n                promisesArray = [];\n                index = 1;\n\n              case 7:\n                if (!(index < CHUNKS_COUNT + 1)) {\n                  _context3.next = 21;\n                  break;\n                }\n\n                start = (index - 1) * CHUNK_SIZE;\n                end = index * CHUNK_SIZE;\n                blob = index < CHUNKS_COUNT ? this.state.fileSelected.slice(start, end) : this.state.fileSelected.slice(start); // Get presigned URL for each part\n\n                _context3.next = 13;\n                return axios.get(\"\".concat(this.state.backendUrl, \"/get-upload-url\"), {\n                  params: {\n                    fileName: this.state.fileName,\n                    partNumber: index,\n                    uploadId: this.state.uploadId\n                  }\n                });\n\n              case 13:\n                getUploadUrlResp = _context3.sent;\n                presignedUrl = getUploadUrlResp.data.presignedUrl;\n                console.log('   Presigned URL ' + index + ': ' + presignedUrl + ' filetype ' + this.state.fileSelected.type); // Send part aws server\n\n                uploadResp = axios.put(presignedUrl, blob, {\n                  headers: {\n                    'Content-Type': this.state.fileSelected.type\n                  }\n                });\n                promisesArray.push(uploadResp);\n\n              case 18:\n                index++;\n                _context3.next = 7;\n                break;\n\n              case 21:\n                _context3.next = 23;\n                return Promise.all(promisesArray);\n\n              case 23:\n                resolvedArray = _context3.sent;\n                console.log(resolvedArray, ' resolvedAr');\n                uploadPartsArray = [];\n                resolvedArray.forEach(function (resolvedPromise, index) {\n                  uploadPartsArray.push({\n                    ETag: resolvedPromise.headers.etag,\n                    PartNumber: index + 1\n                  });\n                }); // CompleteMultipartUpload in the backend server\n\n                _context3.next = 29;\n                return axios.post(\"\".concat(this.state.backendUrl, \"/complete-upload\"), {\n                  params: {\n                    fileName: this.state.fileName,\n                    parts: uploadPartsArray,\n                    uploadId: this.state.uploadId\n                  }\n                });\n\n              case 29:\n                completeUploadResp = _context3.sent;\n                console.log(completeUploadResp.data, \"complete upload response\");\n                _context3.next = 36;\n                break;\n\n              case 33:\n                _context3.prev = 33;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.log(_context3.t0);\n\n              case 36:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 33]]);\n      }));\n\n      function uploadMultipartFile() {\n        return _uploadMultipartFile.apply(this, arguments);\n      }\n\n      return uploadMultipartFile;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(\"form\", {\n        onSubmit: this.startUpload.bind(this)\n      }, __jsx(\"div\", null, __jsx(\"p\", null, \"Upload Dataset:\"), __jsx(\"input\", {\n        type: \"file\",\n        id: \"file\",\n        onChange: this.fileHandler.bind(this)\n      }), __jsx(\"button\", {\n        type: \"submit\"\n      }, \"Upload\"))));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nexport { Index as default };","map":null,"metadata":{},"sourceType":"module"}